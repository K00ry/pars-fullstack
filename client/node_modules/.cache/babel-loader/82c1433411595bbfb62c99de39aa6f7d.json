{"ast":null,"code":"import { Children, Component, createElement } from 'react';\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n/* eslint-disable no-unused-vars */\n\n\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n  if (val === null || val === undefined) {\n    throw new TypeError('Object.assign cannot be called with null or undefined');\n  }\n\n  return Object(val);\n}\n\nfunction shouldUseNative() {\n  try {\n    if (!Object.assign) {\n      return false;\n    } // Detect buggy property enumeration order in older V8 versions.\n    // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\n\n    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\n    test1[5] = 'de';\n\n    if (Object.getOwnPropertyNames(test1)[0] === '5') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test2 = {};\n\n    for (var i = 0; i < 10; i++) {\n      test2['_' + String.fromCharCode(i)] = i;\n    }\n\n    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n      return test2[n];\n    });\n\n    if (order2.join('') !== '0123456789') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test3 = {};\n    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n      test3[letter] = letter;\n    });\n\n    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    // We don't expect any of the above to throw, but better to be safe.\n    return false;\n  }\n}\n\nvar objectAssign = shouldUseNative() ? Object.assign : function (target, source) {\n  var from;\n  var to = toObject(target);\n  var symbols;\n\n  for (var s = 1; s < arguments.length; s++) {\n    from = Object(arguments[s]);\n\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n\n    if (getOwnPropertySymbols) {\n      symbols = getOwnPropertySymbols(from);\n\n      for (var i = 0; i < symbols.length; i++) {\n        if (propIsEnumerable.call(from, symbols[i])) {\n          to[symbols[i]] = from[symbols[i]];\n        }\n      }\n    }\n  }\n\n  return to;\n};\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\nvar ReactPropTypesSecret_1 = ReactPropTypesSecret;\n\nvar printWarning = function printWarning() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;\n  var loggedTypeFailures = {};\n\n  printWarning = function printWarning(text) {\n    var message = 'Warning: ' + text;\n\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\n\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\n        var error; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);\n        } catch (ex) {\n          error = ex;\n        }\n\n        if (error && !(error instanceof Error)) {\n          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');\n        }\n\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          var stack = getStack ? getStack() : '';\n          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));\n        }\n      }\n    }\n  }\n}\n\nvar checkPropTypes_1 = checkPropTypes;\n\nvar printWarning$1 = function printWarning$1() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  printWarning$1 = function printWarning$1(text) {\n    var message = 'Warning: ' + text;\n\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\nfunction emptyFunctionThatReturnsNull() {\n  return null;\n}\n\nvar factoryWithTypeCheckers = function factoryWithTypeCheckers(isValidElement, throwOnDirectAccess) {\n  /* global Symbol */\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */\n\n  function getIteratorFn(maybeIterable) {\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n  /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */\n\n\n  var ANONYMOUS = '<<anonymous>>'; // Important!\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n\n  var ReactPropTypes = {\n    array: createPrimitiveTypeChecker('array'),\n    bool: createPrimitiveTypeChecker('boolean'),\n    func: createPrimitiveTypeChecker('function'),\n    number: createPrimitiveTypeChecker('number'),\n    object: createPrimitiveTypeChecker('object'),\n    string: createPrimitiveTypeChecker('string'),\n    symbol: createPrimitiveTypeChecker('symbol'),\n    any: createAnyTypeChecker(),\n    arrayOf: createArrayOfTypeChecker,\n    element: createElementTypeChecker(),\n    instanceOf: createInstanceTypeChecker,\n    node: createNodeChecker(),\n    objectOf: createObjectOfTypeChecker,\n    oneOf: createEnumTypeChecker,\n    oneOfType: createUnionTypeChecker,\n    shape: createShapeTypeChecker,\n    exact: createStrictShapeTypeChecker\n  };\n  /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */\n\n  /*eslint-disable no-self-compare*/\n\n  function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  }\n  /*eslint-enable no-self-compare*/\n\n  /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */\n\n\n  function PropTypeError(message) {\n    this.message = message;\n    this.stack = '';\n  } // Make `instanceof Error` still work for returned errors.\n\n\n  PropTypeError.prototype = Error.prototype;\n\n  function createChainableTypeChecker(validate) {\n    if (process.env.NODE_ENV !== 'production') {\n      var manualPropTypeCallCache = {};\n      var manualPropTypeWarningCount = 0;\n    }\n\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n\n      if (secret !== ReactPropTypesSecret_1) {\n        if (throwOnDirectAccess) {\n          // New behavior only for users of `prop-types` package\n          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');\n          err.name = 'Invariant Violation';\n          throw err;\n        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {\n          // Old behavior for people using React.PropTypes\n          var cacheKey = componentName + ':' + propName;\n\n          if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors\n          manualPropTypeWarningCount < 3) {\n            printWarning$1('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');\n            manualPropTypeCallCache[cacheKey] = true;\n            manualPropTypeWarningCount++;\n          }\n        }\n      }\n\n      if (props[propName] == null) {\n        if (isRequired) {\n          if (props[propName] === null) {\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }\n\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }\n\n        return null;\n      } else {\n        return validate(props, propName, componentName, location, propFullName);\n      }\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n    return chainedCheckType;\n  }\n\n  function createPrimitiveTypeChecker(expectedType) {\n    function validate(props, propName, componentName, location, propFullName, secret) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n\n      if (propType !== expectedType) {\n        // `propValue` being instance of, say, date/regexp, pass the 'object'\n        // check, but we can offer a more precise error message here rather than\n        // 'of type `object`'.\n        var preciseType = getPreciseType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createAnyTypeChecker() {\n    return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n  }\n\n  function createArrayOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }\n\n      var propValue = props[propName];\n\n      if (!Array.isArray(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }\n\n      for (var i = 0; i < propValue.length; i++) {\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);\n\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n\n      if (!isValidElement(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createInstanceTypeChecker(expectedClass) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!(props[propName] instanceof expectedClass)) {\n        var expectedClassName = expectedClass.name || ANONYMOUS;\n        var actualClassName = getClassName(props[propName]);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createEnumTypeChecker(expectedValues) {\n    if (!Array.isArray(expectedValues)) {\n      process.env.NODE_ENV !== 'production' ? printWarning$1('Invalid argument supplied to oneOf, expected an instance of array.') : void 0;\n      return emptyFunctionThatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n\n      for (var i = 0; i < expectedValues.length; i++) {\n        if (is(propValue, expectedValues[i])) {\n          return null;\n        }\n      }\n\n      var valuesString = JSON.stringify(expectedValues);\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createObjectOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }\n\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }\n\n      for (var key in propValue) {\n        if (propValue.hasOwnProperty(key)) {\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);\n\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createUnionTypeChecker(arrayOfTypeCheckers) {\n    if (!Array.isArray(arrayOfTypeCheckers)) {\n      process.env.NODE_ENV !== 'production' ? printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n      return emptyFunctionThatReturnsNull;\n    }\n\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n\n      if (typeof checker !== 'function') {\n        printWarning$1('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');\n        return emptyFunctionThatReturnsNull;\n      }\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n\n        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {\n          return null;\n        }\n      }\n\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createNodeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!isNode(props[propName])) {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n\n      for (var key in shapeTypes) {\n        var checker = shapeTypes[key];\n\n        if (!checker) {\n          continue;\n        }\n\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);\n\n        if (error) {\n          return error;\n        }\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function createStrictShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      } // We need to check all keys in case some are required but missing from\n      // props.\n\n\n      var allKeys = objectAssign({}, props[propName], shapeTypes);\n\n      for (var key in allKeys) {\n        var checker = shapeTypes[key];\n\n        if (!checker) {\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));\n        }\n\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);\n\n        if (error) {\n          return error;\n        }\n      }\n\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function isNode(propValue) {\n    switch (typeof propValue) {\n      case 'number':\n      case 'string':\n      case 'undefined':\n        return true;\n\n      case 'boolean':\n        return !propValue;\n\n      case 'object':\n        if (Array.isArray(propValue)) {\n          return propValue.every(isNode);\n        }\n\n        if (propValue === null || isValidElement(propValue)) {\n          return true;\n        }\n\n        var iteratorFn = getIteratorFn(propValue);\n\n        if (iteratorFn) {\n          var iterator = iteratorFn.call(propValue);\n          var step;\n\n          if (iteratorFn !== propValue.entries) {\n            while (!(step = iterator.next()).done) {\n              if (!isNode(step.value)) {\n                return false;\n              }\n            }\n          } else {\n            // Iterator will provide entry [k,v] tuples rather than values.\n            while (!(step = iterator.next()).done) {\n              var entry = step.value;\n\n              if (entry) {\n                if (!isNode(entry[1])) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  function isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === 'symbol') {\n      return true;\n    } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n\n\n    if (propValue['@@toStringTag'] === 'Symbol') {\n      return true;\n    } // Fallback for non-spec compliant Symbols which are polyfilled.\n\n\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n      return true;\n    }\n\n    return false;\n  } // Equivalent of `typeof` but with special handling for array and regexp.\n\n\n  function getPropType(propValue) {\n    var propType = typeof propValue;\n\n    if (Array.isArray(propValue)) {\n      return 'array';\n    }\n\n    if (propValue instanceof RegExp) {\n      // Old webkits (at least until Android 4.0) return 'function' rather than\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n      // passes PropTypes.object.\n      return 'object';\n    }\n\n    if (isSymbol(propType, propValue)) {\n      return 'symbol';\n    }\n\n    return propType;\n  } // This handles more types than `getPropType`. Only used for error messages.\n  // See `createPrimitiveTypeChecker`.\n\n\n  function getPreciseType(propValue) {\n    if (typeof propValue === 'undefined' || propValue === null) {\n      return '' + propValue;\n    }\n\n    var propType = getPropType(propValue);\n\n    if (propType === 'object') {\n      if (propValue instanceof Date) {\n        return 'date';\n      } else if (propValue instanceof RegExp) {\n        return 'regexp';\n      }\n    }\n\n    return propType;\n  } // Returns a string that is postfixed to a warning about an invalid type.\n  // For example, \"undefined\" or \"of type array\"\n\n\n  function getPostfixForTypeWarning(value) {\n    var type = getPreciseType(value);\n\n    switch (type) {\n      case 'array':\n      case 'object':\n        return 'an ' + type;\n\n      case 'boolean':\n      case 'date':\n      case 'regexp':\n        return 'a ' + type;\n\n      default:\n        return type;\n    }\n  } // Returns class name of the object, if any.\n\n\n  function getClassName(propValue) {\n    if (!propValue.constructor || !propValue.constructor.name) {\n      return ANONYMOUS;\n    }\n\n    return propValue.constructor.name;\n  }\n\n  ReactPropTypes.checkPropTypes = checkPropTypes_1;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n  return ReactPropTypes;\n};\n\nfunction emptyFunction() {}\n\nvar factoryWithThrowingShims = function factoryWithThrowingShims() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret_1) {\n      // It is still safe when called from React.\n      return;\n    }\n\n    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');\n    err.name = 'Invariant Violation';\n    throw err;\n  }\n\n  shim.isRequired = shim;\n\n  function getShim() {\n    return shim;\n  } // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n\n\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim\n  };\n  ReactPropTypes.checkPropTypes = emptyFunction;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n  return ReactPropTypes;\n};\n\nvar propTypes = createCommonjsModule(function (module) {\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n  if (process.env.NODE_ENV !== 'production') {\n    var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 0xeac7;\n\n    var isValidElement = function isValidElement(object) {\n      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n    }; // By explicitly using `prop-types` you are opting into new development behavior.\n    // http://fb.me/prop-types-in-prod\n\n\n    var throwOnDirectAccess = true;\n    module.exports = factoryWithTypeCheckers(isValidElement, throwOnDirectAccess);\n  } else {\n    // By explicitly using `prop-types` you are opting into new production behavior.\n    // http://fb.me/prop-types-in-prod\n    module.exports = factoryWithThrowingShims();\n  }\n});\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar NODE_ENV = process.env.NODE_ENV;\n\nvar invariant = function invariant(condition, format, a, b, c, d, e, f) {\n  if (NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n\n    throw error;\n  }\n};\n\nvar invariant_1 = invariant; // FLOW\n// PROPTYPES\n\nvar methodShape = propTypes.oneOf(['DELETE', 'FORM_DATA', 'GET', 'HEAD', 'PATCH', 'POST', 'PUT', 'TRACE']);\nvar storeShape = propTypes.shape({\n  getState: propTypes.func\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar asyncToGenerator = function asyncToGenerator(fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n};\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar _this2 = undefined;\n\nvar createConnectedFetch = function createConnectedFetch() {\n  var ConnectedFetch = function (_Component) {\n    inherits(ConnectedFetch, _Component);\n\n    function ConnectedFetch() {\n      var _temp, _this, _ret;\n\n      classCallCheck(this, ConnectedFetch);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.rdfApi = _this.props.api, _this.rdfHeaders = _this.props.headers, _this.rdfInterceptor = _this.props.onIntercept, _this.rdfLoader = _this.props.loader, _this.rdfStore = _this.context && _this.context.store ? _this.context.store.getState() : _this.props.store, _this.rdfTimeout = _this.props.timeout, _this.componentWillReceiveProps = function () {\n        return null;\n      }, _temp), possibleConstructorReturn(_this, _ret);\n    }\n\n    ConnectedFetch.prototype.componentDidMount = function componentDidMount() {\n      var message = '`<ConnectedFetch />` is deprecated and will be removed ' + 'in the next major version. ' + 'Please use `<FetchProvider />` instead.';\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof console !== 'undefined') console.error(message);\n\n        try {\n          throw new Error(message);\n        } catch (x) {} // eslint-disable-line\n\n      }\n    };\n\n    ConnectedFetch.prototype.getChildContext = function getChildContext() {\n      return {\n        rdfApi: this.rdfApi || '',\n        rdfHeaders: this.rdfHeaders,\n        rdfInterceptor: this.rdfInterceptor,\n        rdfLoader: this.rdfLoader,\n        rdfStore: this.props.store || this.rdfStore,\n        rdfTimeout: this.rdfTimeout\n      };\n    };\n\n    ConnectedFetch.prototype.render = function render() {\n      return Children.only(this.props.children);\n    };\n\n    return ConnectedFetch;\n  }(Component);\n\n  ConnectedFetch.defaultProps = {\n    api: undefined,\n    headers: {},\n    loader: undefined,\n    onIntercept: undefined,\n    store: undefined,\n    timeout: undefined\n  };\n  ConnectedFetch.propTypes = {\n    api: propTypes.string,\n    children: propTypes.element.isRequired,\n    headers: propTypes.object,\n    loader: propTypes.oneOfType([propTypes.element, propTypes.func]),\n    onIntercept: propTypes.func,\n    store: storeShape,\n    timeout: propTypes.number\n  };\n  ConnectedFetch.contextTypes = {\n    store: storeShape\n  };\n  ConnectedFetch.childContextTypes = {\n    rdfApi: propTypes.string,\n    rdfHeaders: propTypes.object,\n    rdfInterceptor: propTypes.func,\n    rdfLoader: propTypes.oneOfType([propTypes.element, propTypes.func]),\n    rdfStore: propTypes.object,\n    rdfTimeout: propTypes.number\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    ConnectedFetch.prototype.componentWillReceiveProps = function (nextProps) {\n      !( // $FlowFixMe\n      _this2.rdfApi === nextProps.api) ? process.env.NODE_ENV !== 'production' ? invariant_1(false, '<ConnectedFetch> does not support changing `api` on the fly.') : invariant_1(false) : void 0;\n      !( // $FlowFixMe\n      _this2.rdfHeaders === nextProps.headers) ? process.env.NODE_ENV !== 'production' ? invariant_1(false, '<ConnectedFetch> does not support changing `headers` on the fly.') : invariant_1(false) : void 0;\n      !( // $FlowFixMe\n      _this2.rdfLoader === nextProps.loader) ? process.env.NODE_ENV !== 'production' ? invariant_1(false, '<ConnectedFetch> does not support changing `loader` on the fly.') : invariant_1(false) : void 0;\n      !( // $FlowFixMe\n      _this2.rdfInterceptor === nextProps.onIntercept) ? process.env.NODE_ENV !== 'production' ? invariant_1(false, '<ConnectedFetch> does not support changing `onIntercept` on the fly.') : invariant_1(false) : void 0;\n      !( // $FlowFixMe\n      _this2.rdfStore === nextProps.store) ? process.env.NODE_ENV !== 'production' ? invariant_1(false, '<ConnectedFetch> does not support changing `store` on the fly.') : invariant_1(false) : void 0;\n      !( // $FlowFixMe\n      _this2.rdfTimeout === nextProps.timeout) ? process.env.NODE_ENV !== 'production' ? invariant_1(false, '<ConnectedFetch> does not support changing `timeout` on the fly.') : invariant_1(false) : void 0;\n    };\n  }\n\n  return ConnectedFetch;\n};\n\nvar ConnectedFetch = createConnectedFetch();\nvar runtime = createCommonjsModule(function (module) {\n  /**\n   * Copyright (c) 2014-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n  !function (global) {\n    var Op = Object.prototype;\n    var hasOwn = Op.hasOwnProperty;\n    var undefined; // More compressible than void 0.\n\n    var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n    var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n    var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n    var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n    var runtime = global.regeneratorRuntime;\n\n    if (runtime) {\n      {\n        // If regeneratorRuntime is defined globally and we're in a module,\n        // make the exports object identical to regeneratorRuntime.\n        module.exports = runtime;\n      } // Don't bother evaluating the rest of this file if the runtime was\n      // already defined globally.\n\n      return;\n    } // Define the runtime globally (as expected by generated code) as either\n    // module.exports (if we're in a module) or a new, empty object.\n\n\n    runtime = global.regeneratorRuntime = module.exports;\n\n    function wrap(innerFn, outerFn, self, tryLocsList) {\n      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n      var generator = Object.create(protoGenerator.prototype);\n      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n      // .throw, and .return methods.\n\n      generator._invoke = makeInvokeMethod(innerFn, self, context);\n      return generator;\n    }\n\n    runtime.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n    // record like context.tryEntries[i].completion. This interface could\n    // have been (and was previously) designed to take a closure to be\n    // invoked without arguments, but in all the cases we care about we\n    // already have an existing method we want to call, so there's no need\n    // to create a new function object. We can even get away with assuming\n    // the method takes exactly one argument, since that happens to be true\n    // in every case, so we don't have to touch the arguments object. The\n    // only additional allocation required is the completion record, which\n    // has a stable shape and so hopefully should be cheap to allocate.\n\n    function tryCatch(fn, obj, arg) {\n      try {\n        return {\n          type: \"normal\",\n          arg: fn.call(obj, arg)\n        };\n      } catch (err) {\n        return {\n          type: \"throw\",\n          arg: err\n        };\n      }\n    }\n\n    var GenStateSuspendedStart = \"suspendedStart\";\n    var GenStateSuspendedYield = \"suspendedYield\";\n    var GenStateExecuting = \"executing\";\n    var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n    // breaking out of the dispatch switch statement.\n\n    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n    // .constructor.prototype properties for functions that return Generator\n    // objects. For full spec compliance, you may wish to configure your\n    // minifier not to mangle the names of these two functions.\n\n    function Generator() {}\n\n    function GeneratorFunction() {}\n\n    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n    // don't natively support it.\n\n\n    var IteratorPrototype = {};\n\n    IteratorPrototype[iteratorSymbol] = function () {\n      return this;\n    };\n\n    var getProto = Object.getPrototypeOf;\n    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n      // This environment has a native %IteratorPrototype%; use it instead\n      // of the polyfill.\n      IteratorPrototype = NativeIteratorPrototype;\n    }\n\n    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n    GeneratorFunctionPrototype.constructor = GeneratorFunction;\n    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\"; // Helper for defining the .next, .throw, and .return methods of the\n    // Iterator interface in terms of a single ._invoke method.\n\n    function defineIteratorMethods(prototype) {\n      [\"next\", \"throw\", \"return\"].forEach(function (method) {\n        prototype[method] = function (arg) {\n          return this._invoke(method, arg);\n        };\n      });\n    }\n\n    runtime.isGeneratorFunction = function (genFun) {\n      var ctor = typeof genFun === \"function\" && genFun.constructor;\n      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n      // do is to check its .name property.\n      (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n    };\n\n    runtime.mark = function (genFun) {\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n      } else {\n        genFun.__proto__ = GeneratorFunctionPrototype;\n\n        if (!(toStringTagSymbol in genFun)) {\n          genFun[toStringTagSymbol] = \"GeneratorFunction\";\n        }\n      }\n\n      genFun.prototype = Object.create(Gp);\n      return genFun;\n    }; // Within the body of any async function, `await x` is transformed to\n    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n    // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n    // meant to be awaited.\n\n\n    runtime.awrap = function (arg) {\n      return {\n        __await: arg\n      };\n    };\n\n    function AsyncIterator(generator) {\n      function invoke(method, arg, resolve, reject) {\n        var record = tryCatch(generator[method], generator, arg);\n\n        if (record.type === \"throw\") {\n          reject(record.arg);\n        } else {\n          var result = record.arg;\n          var value = result.value;\n\n          if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n            return Promise.resolve(value.__await).then(function (value) {\n              invoke(\"next\", value, resolve, reject);\n            }, function (err) {\n              invoke(\"throw\", err, resolve, reject);\n            });\n          }\n\n          return Promise.resolve(value).then(function (unwrapped) {\n            // When a yielded Promise is resolved, its final value becomes\n            // the .value of the Promise<{value,done}> result for the\n            // current iteration. If the Promise is rejected, however, the\n            // result for this iteration will be rejected with the same\n            // reason. Note that rejections of yielded Promises are not\n            // thrown back into the generator function, as is the case\n            // when an awaited Promise is rejected. This difference in\n            // behavior between yield and await is important, because it\n            // allows the consumer to decide what to do with the yielded\n            // rejection (swallow it and continue, manually .throw it back\n            // into the generator, abandon iteration, whatever). With\n            // await, by contrast, there is no opportunity to examine the\n            // rejection reason outside the generator function, so the\n            // only option is to throw it from the await expression, and\n            // let the generator function handle the exception.\n            result.value = unwrapped;\n            resolve(result);\n          }, reject);\n        }\n      }\n\n      var previousPromise;\n\n      function enqueue(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new Promise(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n\n        return previousPromise = // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n        // invocations of the iterator.\n        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      } // Define the unified helper method that is used to implement .next,\n      // .throw, and .return (see defineIteratorMethods).\n\n\n      this._invoke = enqueue;\n    }\n\n    defineIteratorMethods(AsyncIterator.prototype);\n\n    AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n      return this;\n    };\n\n    runtime.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n    // AsyncIterator objects; they just return a Promise for the value of\n    // the final result produced by the iterator.\n\n    runtime.async = function (innerFn, outerFn, self, tryLocsList) {\n      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));\n      return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function (result) {\n        return result.done ? result.value : iter.next();\n      });\n    };\n\n    function makeInvokeMethod(innerFn, self, context) {\n      var state = GenStateSuspendedStart;\n      return function invoke(method, arg) {\n        if (state === GenStateExecuting) {\n          throw new Error(\"Generator is already running\");\n        }\n\n        if (state === GenStateCompleted) {\n          if (method === \"throw\") {\n            throw arg;\n          } // Be forgiving, per 25.3.3.3.3 of the spec:\n          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n          return doneResult();\n        }\n\n        context.method = method;\n        context.arg = arg;\n\n        while (true) {\n          var delegate = context.delegate;\n\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (context.method === \"next\") {\n            // Setting context._sent for legacy support of Babel's\n            // function.sent implementation.\n            context.sent = context._sent = context.arg;\n          } else if (context.method === \"throw\") {\n            if (state === GenStateSuspendedStart) {\n              state = GenStateCompleted;\n              throw context.arg;\n            }\n\n            context.dispatchException(context.arg);\n          } else if (context.method === \"return\") {\n            context.abrupt(\"return\", context.arg);\n          }\n\n          state = GenStateExecuting;\n          var record = tryCatch(innerFn, self, context);\n\n          if (record.type === \"normal\") {\n            // If an exception is thrown from innerFn, we leave state ===\n            // GenStateExecuting and loop back for another invocation.\n            state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n            if (record.arg === ContinueSentinel) {\n              continue;\n            }\n\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          } else if (record.type === \"throw\") {\n            state = GenStateCompleted; // Dispatch the exception by looping back around to the\n            // context.dispatchException(context.arg) call above.\n\n            context.method = \"throw\";\n            context.arg = record.arg;\n          }\n        }\n      };\n    } // Call delegate.iterator[context.method](context.arg) and handle the\n    // result, either by returning a { value, done } result from the\n    // delegate iterator, or by modifying context.method and context.arg,\n    // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n    function maybeInvokeDelegate(delegate, context) {\n      var method = delegate.iterator[context.method];\n\n      if (method === undefined) {\n        // A .throw or .return when the delegate iterator has no .throw\n        // method always terminates the yield* loop.\n        context.delegate = null;\n\n        if (context.method === \"throw\") {\n          if (delegate.iterator.return) {\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            context.method = \"return\";\n            context.arg = undefined;\n            maybeInvokeDelegate(delegate, context);\n\n            if (context.method === \"throw\") {\n              // If maybeInvokeDelegate(context) changed context.method from\n              // \"return\" to \"throw\", let that override the TypeError below.\n              return ContinueSentinel;\n            }\n          }\n\n          context.method = \"throw\";\n          context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n        }\n\n        return ContinueSentinel;\n      }\n\n      var record = tryCatch(method, delegate.iterator, context.arg);\n\n      if (record.type === \"throw\") {\n        context.method = \"throw\";\n        context.arg = record.arg;\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      var info = record.arg;\n\n      if (!info) {\n        context.method = \"throw\";\n        context.arg = new TypeError(\"iterator result is not an object\");\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      if (info.done) {\n        // Assign the result of the finished delegate to the temporary\n        // variable specified by delegate.resultName (see delegateYield).\n        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n        context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n        // exception, let the outer generator proceed normally. If\n        // context.method was \"next\", forget context.arg since it has been\n        // \"consumed\" by the delegate iterator. If context.method was\n        // \"return\", allow the original .return call to continue in the\n        // outer generator.\n\n        if (context.method !== \"return\") {\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n      } else {\n        // Re-yield the result returned by the delegate method.\n        return info;\n      } // The delegate iterator is finished, so forget it and continue with\n      // the outer generator.\n\n\n      context.delegate = null;\n      return ContinueSentinel;\n    } // Define Generator.prototype.{next,throw,return} in terms of the\n    // unified ._invoke helper method.\n\n\n    defineIteratorMethods(Gp);\n    Gp[toStringTagSymbol] = \"Generator\"; // A Generator should always return itself as the iterator object when the\n    // @@iterator function is called on it. Some browsers' implementations of the\n    // iterator prototype chain incorrectly implement this, causing the Generator\n    // object to not be returned from this call. This ensures that doesn't happen.\n    // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n    Gp[iteratorSymbol] = function () {\n      return this;\n    };\n\n    Gp.toString = function () {\n      return \"[object Generator]\";\n    };\n\n    function pushTryEntry(locs) {\n      var entry = {\n        tryLoc: locs[0]\n      };\n\n      if (1 in locs) {\n        entry.catchLoc = locs[1];\n      }\n\n      if (2 in locs) {\n        entry.finallyLoc = locs[2];\n        entry.afterLoc = locs[3];\n      }\n\n      this.tryEntries.push(entry);\n    }\n\n    function resetTryEntry(entry) {\n      var record = entry.completion || {};\n      record.type = \"normal\";\n      delete record.arg;\n      entry.completion = record;\n    }\n\n    function Context(tryLocsList) {\n      // The root entry object (effectively a try statement without a catch\n      // or a finally block) gives us a place to store values thrown from\n      // locations where there is no enclosing try statement.\n      this.tryEntries = [{\n        tryLoc: \"root\"\n      }];\n      tryLocsList.forEach(pushTryEntry, this);\n      this.reset(true);\n    }\n\n    runtime.keys = function (object) {\n      var keys = [];\n\n      for (var key in object) {\n        keys.push(key);\n      }\n\n      keys.reverse(); // Rather than returning an object with a next method, we keep\n      // things simple and return the next function itself.\n\n      return function next() {\n        while (keys.length) {\n          var key = keys.pop();\n\n          if (key in object) {\n            next.value = key;\n            next.done = false;\n            return next;\n          }\n        } // To avoid creating an additional object, we just hang the .value\n        // and .done properties off the next function object itself. This\n        // also ensures that the minifier will not anonymize the function.\n\n\n        next.done = true;\n        return next;\n      };\n    };\n\n    function values(iterable) {\n      if (iterable) {\n        var iteratorMethod = iterable[iteratorSymbol];\n\n        if (iteratorMethod) {\n          return iteratorMethod.call(iterable);\n        }\n\n        if (typeof iterable.next === \"function\") {\n          return iterable;\n        }\n\n        if (!isNaN(iterable.length)) {\n          var i = -1,\n              next = function next() {\n            while (++i < iterable.length) {\n              if (hasOwn.call(iterable, i)) {\n                next.value = iterable[i];\n                next.done = false;\n                return next;\n              }\n            }\n\n            next.value = undefined;\n            next.done = true;\n            return next;\n          };\n\n          return next.next = next;\n        }\n      } // Return an iterator with no values.\n\n\n      return {\n        next: doneResult\n      };\n    }\n\n    runtime.values = values;\n\n    function doneResult() {\n      return {\n        value: undefined,\n        done: true\n      };\n    }\n\n    Context.prototype = {\n      constructor: Context,\n      reset: function reset(skipTempReset) {\n        this.prev = 0;\n        this.next = 0; // Resetting context._sent for legacy support of Babel's\n        // function.sent implementation.\n\n        this.sent = this._sent = undefined;\n        this.done = false;\n        this.delegate = null;\n        this.method = \"next\";\n        this.arg = undefined;\n        this.tryEntries.forEach(resetTryEntry);\n\n        if (!skipTempReset) {\n          for (var name in this) {\n            // Not sure about the optimal order of these conditions:\n            if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n              this[name] = undefined;\n            }\n          }\n        }\n      },\n      stop: function stop() {\n        this.done = true;\n        var rootEntry = this.tryEntries[0];\n        var rootRecord = rootEntry.completion;\n\n        if (rootRecord.type === \"throw\") {\n          throw rootRecord.arg;\n        }\n\n        return this.rval;\n      },\n      dispatchException: function dispatchException(exception) {\n        if (this.done) {\n          throw exception;\n        }\n\n        var context = this;\n\n        function handle(loc, caught) {\n          record.type = \"throw\";\n          record.arg = exception;\n          context.next = loc;\n\n          if (caught) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            context.method = \"next\";\n            context.arg = undefined;\n          }\n\n          return !!caught;\n        }\n\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          var record = entry.completion;\n\n          if (entry.tryLoc === \"root\") {\n            // Exception thrown outside of any try block that could handle\n            // it, so set the completion value of the entire function to\n            // throw the exception.\n            return handle(\"end\");\n          }\n\n          if (entry.tryLoc <= this.prev) {\n            var hasCatch = hasOwn.call(entry, \"catchLoc\");\n            var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n            if (hasCatch && hasFinally) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              } else if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else if (hasCatch) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              }\n            } else if (hasFinally) {\n              if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else {\n              throw new Error(\"try statement without catch or finally\");\n            }\n          }\n        }\n      },\n      abrupt: function abrupt(type, arg) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n            var finallyEntry = entry;\n            break;\n          }\n        }\n\n        if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n          // Ignore the finally entry if control is not jumping to a\n          // location outside the try/catch block.\n          finallyEntry = null;\n        }\n\n        var record = finallyEntry ? finallyEntry.completion : {};\n        record.type = type;\n        record.arg = arg;\n\n        if (finallyEntry) {\n          this.method = \"next\";\n          this.next = finallyEntry.finallyLoc;\n          return ContinueSentinel;\n        }\n\n        return this.complete(record);\n      },\n      complete: function complete(record, afterLoc) {\n        if (record.type === \"throw\") {\n          throw record.arg;\n        }\n\n        if (record.type === \"break\" || record.type === \"continue\") {\n          this.next = record.arg;\n        } else if (record.type === \"return\") {\n          this.rval = this.arg = record.arg;\n          this.method = \"return\";\n          this.next = \"end\";\n        } else if (record.type === \"normal\" && afterLoc) {\n          this.next = afterLoc;\n        }\n\n        return ContinueSentinel;\n      },\n      finish: function finish(finallyLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.finallyLoc === finallyLoc) {\n            this.complete(entry.completion, entry.afterLoc);\n            resetTryEntry(entry);\n            return ContinueSentinel;\n          }\n        }\n      },\n      \"catch\": function _catch(tryLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.tryLoc === tryLoc) {\n            var record = entry.completion;\n\n            if (record.type === \"throw\") {\n              var thrown = record.arg;\n              resetTryEntry(entry);\n            }\n\n            return thrown;\n          }\n        } // The context.catch method must only be called with a location\n        // argument that corresponds to a known catch block.\n\n\n        throw new Error(\"illegal catch attempt\");\n      },\n      delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n        this.delegate = {\n          iterator: values(iterable),\n          resultName: resultName,\n          nextLoc: nextLoc\n        };\n\n        if (this.method === \"next\") {\n          // Deliberately forget the last sent value so that we don't\n          // accidentally pass it on to the delegate.\n          this.arg = undefined;\n        }\n\n        return ContinueSentinel;\n      }\n    };\n  }( // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  function () {\n    return this;\n  }() || Function(\"return this\")());\n});\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\n\nvar g = function () {\n  return this;\n}() || Function(\"return this\")(); // Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\n\n\nvar hadRuntime = g.regeneratorRuntime && Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0; // Save the old regeneratorRuntime in case it needs to be restored later.\n\nvar oldRuntime = hadRuntime && g.regeneratorRuntime; // Force reevalutation of runtime.js.\n\ng.regeneratorRuntime = undefined;\nvar runtimeModule = runtime;\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch (e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\nvar regenerator = runtimeModule;\nvar _this = undefined;\n\nvar requestToApi = function requestToApi(args) {\n  var body = args.body,\n      headers = args.headers,\n      method = args.method,\n      _args$onProgress = args.onProgress,\n      onProgress = _args$onProgress === undefined ? function () {\n    return null;\n  } : _args$onProgress,\n      onTimeout = args.onTimeout,\n      params = args.params,\n      onIntercept = args.onIntercept,\n      url = args.url,\n      _args$timeout = args.timeout,\n      timeout = _args$timeout === undefined ? 0 : _args$timeout;\n  var defaultHeaders = {\n    Accept: 'application/json;charset=UTF-8',\n    'Content-Type': method === 'FORM_DATA' ? 'multipart/form-data' : 'application/json'\n  };\n  var formData = new FormData();\n  var route = url;\n  var interceptedResult = null;\n\n  var handleError = function () {\n    var _ref = asyncToGenerator(\n    /*#__PURE__*/\n    regenerator.mark(function _callee(error, request, reject) {\n      return regenerator.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              reject({\n                response: request.response,\n                request: request\n              });\n\n            case 1:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, _this);\n    }));\n\n    return function handleError(_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleTimeout = function handleTimeout(request, reject) {\n    request.abort();\n    if (onTimeout) onTimeout();\n    reject('Your request took more than ' + timeout + 'ms to resolve.');\n  };\n\n  var returnData = function () {\n    var _ref2 = asyncToGenerator(\n    /*#__PURE__*/\n    regenerator.mark(function _callee2(request, resolve, reject) {\n      var isOK, data, response;\n      return regenerator.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (request.readyState === 4) {\n                isOK = request.status >= 200 && request.status <= 299;\n\n                if (isOK) {\n                  data = void 0;\n\n                  try {\n                    if (request.responseText) data = JSON.parse(request.responseText);\n                  } catch (err) {\n                    data = request.responseText;\n                  }\n\n                  response = {\n                    data: data,\n                    isOK: isOK,\n                    request: request,\n                    status: request.status\n                  };\n                  resolve(response);\n                } else if (onIntercept) {\n                  interceptedResult = onIntercept({\n                    currentParams: args,\n                    request: request,\n                    status: request.status\n                  });\n\n                  if (interceptedResult) {\n                    resolve(requestToApi(_extends({}, interceptedResult, {\n                      onIntercept: undefined\n                    })));\n                  } else handleError(request, request, reject);\n                } else handleError(request, request, reject);\n              }\n\n            case 1:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, _this);\n    }));\n\n    return function returnData(_x4, _x5, _x6) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var setHeaders = function setHeaders(request) {\n    Object.entries(defaultHeaders).map(function (defaultHeader) {\n      return request.setRequestHeader(defaultHeader[0], String(defaultHeader[1]));\n    });\n\n    if (headers && Object.keys(headers).length > 0) {\n      Object.entries(headers).map(function (header) {\n        return request.setRequestHeader(header[0], String(header[1]));\n      });\n    }\n  };\n\n  if (method === 'FORM_DATA' && Object.entries(body).length > 0) {\n    Object.entries(body).map( // $FlowFixMe\n    function (entry) {\n      return formData.append(entry[0], entry[1]);\n    });\n  }\n\n  if (params && Object.keys(params).length > 0) {\n    Object.entries(params).map(function (param, index) {\n      return index === 0 ? route = route + '?' + param[0] + '=' + JSON.stringify(param[1]) : route = route + '&' + param[0] + '=' + JSON.stringify(param[1]);\n    });\n  }\n\n  var sendRequest = function sendRequest() {\n    return new Promise(function (resolve, reject) {\n      try {\n        var request = new XMLHttpRequest();\n\n        if (request.upload) {\n          request.upload.onerror = function (error) {\n            return handleError(error, request, resolve);\n          };\n\n          request.upload.onload = function () {\n            return returnData(request, resolve, reject);\n          };\n\n          request.upload.onprogress = onProgress;\n\n          request.upload.ontimeout = function () {\n            return handleTimeout(request, reject);\n          };\n        }\n\n        request.onerror = function (error) {\n          return handleError(error, request, resolve);\n        };\n\n        request.onprogress = onProgress;\n\n        request.onreadystatechange = function () {\n          return returnData(request, resolve, reject);\n        };\n\n        request.ontimeout = function () {\n          return handleTimeout(request, reject);\n        };\n\n        request.open(method === 'FORM_DATA' ? 'POST' : method, route);\n        request.timeout = timeout;\n        setHeaders(request);\n        request.send(method === 'FORM_DATA' ? formData : method === 'DELETE' || method === 'GET' || method === 'HEAD' || method === 'PUT' ? null : JSON.stringify(_extends({}, body)));\n      } catch (request) {\n        handleError(request, request, reject);\n      }\n    });\n  };\n\n  return sendRequest();\n};\n\nvar isEmptyChildren = function isEmptyChildren(children) {\n  return Children.count(children) === 0;\n};\n\nvar Fetch = function (_Component) {\n  inherits(Fetch, _Component);\n\n  function Fetch() {\n    var _this2 = this;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, Fetch);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this._data = undefined, _this._didCallOnLoad = false, _this._isLoaded = false, _this._isUnmounted = false, _this._fetchData = function () {\n      var _ref = asyncToGenerator(\n      /*#__PURE__*/\n      regenerator.mark(function _callee(props, context) {\n        var body, headers, method, onIntercept, onProgress, onTimeout, params, path, url, timeout, route, timeoutValue, apiResponse;\n        return regenerator.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                body = props.body, headers = props.headers, method = props.method, onIntercept = props.onIntercept, onProgress = props.onProgress, onTimeout = props.onTimeout, params = props.params, path = props.path, url = props.url, timeout = props.timeout;\n                route = void 0;\n                timeoutValue = 0;\n                if (path) route = '' + (context.rdfApi || '') + path;else route = url;\n                if (context.rdfTimeout && timeout === -1) timeoutValue = context.rdfTimeout;else if (!context.rdfTimeout && timeout) timeoutValue = Math.max(0, timeout);else if (context.rdfTimeout && timeout) timeoutValue = timeout === -1 ? context.rdfTimeout : timeout;\n                _context.prev = 5;\n                _context.next = 8;\n                return requestToApi({\n                  url: route || '',\n                  body: _extends({}, body),\n                  headers: _extends({}, context.rdfHeaders, headers),\n                  method: method,\n                  onTimeout: onTimeout,\n                  onProgress: onProgress,\n                  onIntercept: onIntercept || context.rdfInterceptor,\n                  params: _extends({}, params),\n                  timeout: timeoutValue\n                });\n\n              case 8:\n                apiResponse = _context.sent;\n\n                if (!_this._isUnmounted) {\n                  _this._handleData(_extends({}, apiResponse, {\n                    store: context.rdfStore\n                  }));\n                }\n\n                _context.next = 15;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context['catch'](5);\n\n                if (!_this._isUnmounted) {\n                  _this._handleData({\n                    error: {\n                      content: _context.t0,\n                      message: 'Something went wrong during the request',\n                      url: route\n                    },\n                    isOK: false,\n                    store: context.rdfStore\n                  });\n\n                  if (process.env.NODE_ENV !== 'production') {\n                    !!_context.t0 ? process.env.NODE_ENV !== 'production' ? invariant_1(false, '<Fetch /> tried to call the route \"' + String(route) + '\" ' + ('with \"' + String(method).toUpperCase() + '\" method ') + 'but resolved with the following error: %s\\n', _this._printError(_context.t0)) : invariant_1(false) : void 0;\n                  }\n                }\n\n              case 15:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, _this2, [[5, 12]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }(), _this._handleData = function (result) {\n      if (!_this._isUnmounted) {\n        _this._isLoaded = true;\n        _this.props.resultOnly ? _this._data = result.error || result.data : _this._data = result;\n\n        _this._returnData(result);\n      }\n    }, _this._printError = function (error) {\n      return error.response && JSON.stringify(error.response).length ? typeof error.response === 'string' ? error.response : _typeof(error.response) === 'object' ? JSON.stringify(error.response, null, 2) : error.response + '. Sorry <Fetch /> couldn\\'t turned this into a readable string. ' + 'Check error.content.request to see what happened.' : \" .Sorry <Fetch /> couldn't turned this into a readable string. \" + 'Check error.content.request to see what happened.';\n    }, _this._renderLoader = function () {\n      var rdfLoader = _this.context.rdfLoader;\n      var loader = _this.props.loader;\n      if (rdfLoader && !loader) return typeof rdfLoader === 'function' ? rdfLoader() : rdfLoader;\n      if (!rdfLoader && loader) return typeof loader === 'function' ? loader() : loader;\n      if (rdfLoader && loader) return typeof loader === 'function' ? loader() : loader;\n      return null;\n    }, _this._returnData = function (result) {\n      var _this$props = _this.props,\n          onError = _this$props.onError,\n          onFetch = _this$props.onFetch;\n      if (onFetch) onFetch(_this._data);\n      if (result.error && onError) onError(_this._data);\n      if (!_this._isUnmounted) _this.forceUpdate();\n    }, _this._validateProps = function (props, context) {\n      var rdfApi = context.rdfApi,\n          rdfStore = context.rdfStore,\n          rdfTimeout = context.rdfTimeout;\n      var children = props.children,\n          component = props.component,\n          onTimeout = props.onTimeout,\n          onFetch = props.onFetch,\n          path = props.path,\n          refetch = props.refetch,\n          render = props.render,\n          timeout = props.timeout,\n          url = props.url;\n      !(path || url) ? process.env.NODE_ENV !== 'production' ? invariant_1(false, 'You must provide a `url` or a `path` to <Fetch />') : invariant_1(false) : void 0;\n\n      if (path) {\n        !(path && rdfApi) ? process.env.NODE_ENV !== 'production' ? invariant_1(false, 'You must implement <FetchProvider> at the root of your ' + 'app and provide an `api` in order to use `path`') : invariant_1(false) : void 0;\n      }\n\n      if (path === 'store') {\n        !(path && rdfStore) ? process.env.NODE_ENV !== 'production' ? invariant_1(false, 'You must implement <FetchProvider> at the root of your ' + 'app and provide a `store` in order to use `path=\"store\"`') : invariant_1(false) : void 0;\n      }\n\n      if (onTimeout) {\n        !(typeof timeout === 'number' && timeout >= 0 || typeof rdfTimeout === 'number' && rdfTimeout >= 0) ? process.env.NODE_ENV !== 'production' ? invariant_1(false, 'You must provide a `timeout` number in ms to <Fetch /> or ' + '<FetchProvider> in order to use `onTimeout`') : invariant_1(false) : void 0;\n      }\n\n      !(children || component || render || onFetch) ? process.env.NODE_ENV !== 'production' ? invariant_1(false, 'You must provide at least one of the following ' + 'to <Fetch />: children, `component`, `onFetch`, `render`') : invariant_1(false) : void 0;\n\n      if (typeof refetch !== 'undefined') {\n        var message = '`refetch` is deprecated and will be removed ' + 'in the next major version. ' + 'Please use `refetchKey` instead.';\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (typeof console !== 'undefined') console.error(message);\n\n          try {\n            throw new Error(message);\n          } catch (x) {} // eslint-disable-line\n\n        }\n      }\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  Fetch.prototype.componentWillMount = function componentWillMount() {\n    this._validateProps(this.props, this.context);\n\n    if (this.props.onLoad && !this._didCallOnLoad) {\n      this._didCallOnLoad = true;\n      this.props.onLoad();\n    }\n  };\n\n  Fetch.prototype.componentDidMount = function componentDidMount() {\n    if (this.props.path === 'store') {\n      this._handleData({\n        data: this.context.rdfStore,\n        isOK: true\n      });\n    } else this._fetchData(this.props, this.context);\n  };\n\n  Fetch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {\n    var _props = this.props,\n        onLoad = _props.onLoad,\n        path = _props.path,\n        refetch = _props.refetch,\n        refetchKey = _props.refetchKey;\n\n    this._validateProps(nextProps, nextContext);\n\n    if (onLoad && !this._didCallOnLoad) {\n      this._didCallOnLoad = true;\n      onLoad();\n    }\n\n    if (path === 'store') {\n      this._handleData({\n        data: this.context.rdfStore,\n        isOK: true\n      });\n    } else if (nextProps.path !== path || nextProps.refetch !== refetch || nextProps.refetchKey !== refetchKey) {\n      this._isLoaded = false;\n\n      this._fetchData(nextProps, nextContext);\n    }\n  };\n\n  Fetch.prototype.componentWillUnmount = function componentWillUnmount() {\n    this._isUnmounted = true;\n  };\n\n  Fetch.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    if (this.props.children !== nextProps.children) return true;\n    if (this.props.loader !== nextProps.loader) return true;\n    if (this.props.onError !== nextProps.onError) return true;\n    if (this.props.onFetch !== nextProps.onFetch) return true;\n    if (this.props.onLoad !== nextProps.onLoad) return true;\n    if (this.props.path !== nextProps.path) return true;\n    if (this.props.params !== nextProps.params) return true;\n    if (this.props.refetch !== nextProps.refetch) return true;\n    if (this.props.refetchKey !== nextProps.refetchKey) return true;\n    if (this.props.render !== nextProps.render) return true;\n    if (this._isLoaded) return true;\n    if (this._data) return true;\n    return false;\n  };\n\n  Fetch.prototype.render = function render() {\n    var _props2 = this.props,\n        children = _props2.children,\n        component = _props2.component,\n        render = _props2.render;\n    if (!this._isLoaded && !this._isUnmounted) return this._renderLoader();\n\n    if (this._isLoaded && !this._isUnmounted) {\n      if (component) return createElement(component, this._data);\n      if (typeof render === 'function') return render(this._data);\n      if (typeof children === 'function') return children(this._data);\n      if (children && !isEmptyChildren(children)) return Children.only(children);\n    }\n\n    return null;\n  };\n\n  return Fetch;\n}(Component);\n\nFetch.propTypes = {\n  body: propTypes.object,\n  children: propTypes.oneOfType([propTypes.element, propTypes.func]),\n  component: propTypes.oneOfType([propTypes.element, propTypes.func]),\n  method: methodShape,\n  loader: propTypes.oneOfType([propTypes.element, propTypes.func]),\n  onError: propTypes.func,\n  onFetch: propTypes.func,\n  onLoad: propTypes.func,\n  onProgress: propTypes.func,\n  onTimeout: propTypes.func,\n  params: propTypes.object,\n  path: propTypes.string,\n  refetch: propTypes.any,\n  refetchKey: propTypes.any,\n  render: propTypes.func,\n  resultOnly: propTypes.bool,\n  url: propTypes.string,\n  timeout: propTypes.number\n};\nFetch.contextTypes = {\n  rdfApi: propTypes.string,\n  rdfHeaders: propTypes.object,\n  rdfInterceptor: propTypes.func,\n  rdfLoader: propTypes.oneOfType([propTypes.element, propTypes.func]),\n  rdfStore: propTypes.object,\n  rdfTimeout: propTypes.number\n};\nFetch.defaultProps = {\n  body: {},\n  children: undefined,\n  component: undefined,\n  loader: undefined,\n  method: 'GET',\n  onError: undefined,\n  onFetch: undefined,\n  onLoad: undefined,\n  onProgress: undefined,\n  onTimeout: undefined,\n  params: {},\n  path: undefined,\n  refetch: undefined,\n  refetchKey: undefined,\n  render: undefined,\n  resultOnly: false,\n  url: undefined,\n  timeout: -1\n};\nvar _this2$1 = undefined;\n\nvar createFetchProvider = function createFetchProvider() {\n  var FetchProvider = function (_Component) {\n    inherits(FetchProvider, _Component);\n\n    function FetchProvider() {\n      var _temp, _this, _ret;\n\n      classCallCheck(this, FetchProvider);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.rdfApi = _this.props.api, _this.rdfHeaders = _this.props.headers, _this.rdfInterceptor = _this.props.onIntercept, _this.rdfLoader = _this.props.loader, _this.rdfStore = _this.context && _this.context.store ? _this.context.store.getState() : _this.props.store, _this.rdfTimeout = _this.props.timeout, _this.componentWillReceiveProps = function () {\n        return null;\n      }, _temp), possibleConstructorReturn(_this, _ret);\n    }\n\n    FetchProvider.prototype.getChildContext = function getChildContext() {\n      return {\n        rdfApi: this.rdfApi || '',\n        rdfHeaders: this.rdfHeaders,\n        rdfInterceptor: this.rdfInterceptor,\n        rdfLoader: this.rdfLoader,\n        rdfStore: this.props.store || this.rdfStore,\n        rdfTimeout: this.rdfTimeout\n      };\n    };\n\n    FetchProvider.prototype.render = function render() {\n      return Children.only(this.props.children);\n    };\n\n    return FetchProvider;\n  }(Component);\n\n  FetchProvider.defaultProps = {\n    api: undefined,\n    headers: {},\n    loader: undefined,\n    onIntercept: undefined,\n    store: undefined,\n    timeout: undefined\n  };\n  FetchProvider.propTypes = {\n    api: propTypes.string,\n    children: propTypes.element.isRequired,\n    headers: propTypes.object,\n    loader: propTypes.oneOfType([propTypes.element, propTypes.func]),\n    onIntercept: propTypes.func,\n    store: storeShape,\n    timeout: propTypes.number\n  };\n  FetchProvider.contextTypes = {\n    store: storeShape\n  };\n  FetchProvider.childContextTypes = {\n    rdfApi: propTypes.string,\n    rdfHeaders: propTypes.object,\n    rdfInterceptor: propTypes.func,\n    rdfLoader: propTypes.oneOfType([propTypes.element, propTypes.func]),\n    rdfStore: propTypes.object,\n    rdfTimeout: propTypes.number\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    FetchProvider.prototype.componentWillReceiveProps = function (nextProps) {\n      !( // $FlowFixMe\n      _this2$1.rdfApi === nextProps.api) ? process.env.NODE_ENV !== 'production' ? invariant_1(false, '<FetchProvider> does not support changing `api` on the fly.') : invariant_1(false) : void 0;\n      !( // $FlowFixMe\n      _this2$1.rdfHeaders === nextProps.headers) ? process.env.NODE_ENV !== 'production' ? invariant_1(false, '<FetchProvider> does not support changing `headers` on the fly.') : invariant_1(false) : void 0;\n      !( // $FlowFixMe\n      _this2$1.rdfLoader === nextProps.loader) ? process.env.NODE_ENV !== 'production' ? invariant_1(false, '<FetchProvider> does not support changing `loader` on the fly.') : invariant_1(false) : void 0;\n      !( // $FlowFixMe\n      _this2$1.rdfInterceptor === nextProps.onIntercept) ? process.env.NODE_ENV !== 'production' ? invariant_1(false, '<FetchProvider> does not support changing `onIntercept` on the fly.') : invariant_1(false) : void 0;\n      !( // $FlowFixMe\n      _this2$1.rdfStore === nextProps.store) ? process.env.NODE_ENV !== 'production' ? invariant_1(false, '<FetchProvider> does not support changing `store` on the fly.') : invariant_1(false) : void 0;\n      !( // $FlowFixMe\n      _this2$1.rdfTimeout === nextProps.timeout) ? process.env.NODE_ENV !== 'production' ? invariant_1(false, '<FetchProvider> does not support changing `timeout` on the fly.') : invariant_1(false) : void 0;\n    };\n  }\n\n  return FetchProvider;\n};\n\nvar FetchProvider = createFetchProvider();\nexport { ConnectedFetch, Fetch, FetchProvider, requestToApi };","map":null,"metadata":{},"sourceType":"module"}