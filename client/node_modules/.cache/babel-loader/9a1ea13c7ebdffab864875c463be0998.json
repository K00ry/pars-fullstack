{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getDefaults, getI18n } from './context';\nvar removedIsInitialSSR = false;\n\nvar I18n = function (_Component) {\n  _inherits(I18n, _Component);\n\n  function I18n(props, context) {\n    _classCallCheck(this, I18n);\n\n    var _this = _possibleConstructorReturn(this, (I18n.__proto__ || Object.getPrototypeOf(I18n)).call(this, props, context));\n\n    _this.i18n = props.i18n || context.i18n || getI18n();\n    var i18nOptions = _this.i18n && _this.i18n.options && _this.i18n.options.react || {};\n    _this.options = _extends({}, getDefaults(), i18nOptions, props); // nextjs SSR: getting data from next.js or other ssr stack\n\n    if (props.initialI18nStore) {\n      _this.i18n.services.resourceStore.data = props.initialI18nStore;\n      _this.options.wait = false; // we got all passed down already\n    }\n\n    if (props.initialLanguage) {\n      _this.i18n.changeLanguage(props.initialLanguage);\n    } // provider SSR: data was set in provider and ssr flag was set\n\n\n    if (_this.i18n.options && _this.i18n.options.isInitialSSR) {\n      _this.options.wait = false;\n    }\n\n    var language = _this.i18n.languages && _this.i18n.languages[0];\n\n    var ready = !!language && _this.getNamespaces().every(function (ns) {\n      return _this.i18n.hasResourceBundle(language, ns);\n    });\n\n    _this.state = {\n      i18nLoadedAt: null,\n      ready: ready\n    };\n    _this.t = _this.getI18nTranslate();\n    _this.onI18nChanged = _this.onI18nChanged.bind(_this);\n    _this.getI18nTranslate = _this.getI18nTranslate.bind(_this);\n    _this.namespaces = _this.getNamespaces.bind(_this);\n    return _this;\n  }\n\n  _createClass(I18n, [{\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        t: this.t,\n        i18n: this.i18n\n      };\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.loadNamespaces();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      // Note that dynamically loading additional namespaces after the initial mount will not block rendering â€“ even if the `wait` option is true.\n      if (this.props.ns && prevProps.ns !== this.props.ns) this.loadNamespaces();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var _this2 = this;\n\n      this.mounted = false;\n\n      if (this.onI18nChanged) {\n        if (this.options.bindI18n) {\n          var p = this.options.bindI18n.split(' ');\n          p.forEach(function (f) {\n            return _this2.i18n.off(f, _this2.onI18nChanged);\n          });\n        }\n\n        if (this.options.bindStore) {\n          var _p = this.options.bindStore.split(' ');\n\n          _p.forEach(function (f) {\n            return _this2.i18n.store && _this2.i18n.store.off(f, _this2.onI18nChanged);\n          });\n        }\n      }\n    }\n  }, {\n    key: 'onI18nChanged',\n    value: function onI18nChanged() {\n      if (!this.mounted) return;\n      if (!this.state.ready && this.options.omitBoundRerender) return;\n      this.t = this.getI18nTranslate();\n      this.setState({\n        i18nLoadedAt: new Date()\n      }); // rerender\n    }\n  }, {\n    key: 'getI18nTranslate',\n    value: function getI18nTranslate() {\n      return this.i18n.getFixedT(null, this.options.nsMode === 'fallback' ? this.getNamespaces() : this.getNamespaces()[0]);\n    }\n  }, {\n    key: 'getNamespaces',\n    value: function getNamespaces() {\n      var ns = this.props.ns || this.i18n.options && this.i18n.options.defaultNS;\n      return typeof ns === 'string' ? [ns] : ns;\n    }\n  }, {\n    key: 'loadNamespaces',\n    value: function loadNamespaces() {\n      var _this3 = this;\n\n      var bind = function bind() {\n        if (_this3.options.bindI18n && _this3.i18n) _this3.i18n.on(_this3.options.bindI18n, _this3.onI18nChanged);\n        if (_this3.options.bindStore && _this3.i18n.store) _this3.i18n.store.on(_this3.options.bindStore, _this3.onI18nChanged);\n      };\n\n      this.mounted = true;\n      this.i18n.loadNamespaces(this.getNamespaces(), function () {\n        var ready = function ready() {\n          if (_this3.mounted && !_this3.state.ready) _this3.setState({\n            ready: true\n          });\n          if (_this3.options.wait && _this3.mounted) bind();\n        };\n\n        if (_this3.i18n.isInitialized) {\n          ready();\n        } else {\n          var initialized = function initialized() {\n            // due to emitter removing issue in i18next we need to delay remove\n            setTimeout(function () {\n              _this3.i18n.off('initialized', initialized);\n            }, 1000);\n            ready();\n          };\n\n          _this3.i18n.on('initialized', initialized);\n        }\n      });\n      if (!this.options.wait) bind();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      var children = this.props.children;\n      var ready = this.state.ready;\n      if (!ready && this.options.wait) return null; // remove ssr flag set by provider - first render was done from now on wait if set to wait\n\n      if (this.i18n.options && this.i18n.options.isInitialSSR && !removedIsInitialSSR) {\n        removedIsInitialSSR = true;\n        setTimeout(function () {\n          delete _this4.i18n.options.isInitialSSR;\n        }, 100);\n      }\n\n      return children(this.t, {\n        i18n: this.i18n,\n        t: this.t,\n        lng: this.i18n.language,\n        ready: ready\n      });\n    }\n  }]);\n\n  return I18n;\n}(Component);\n\nexport default I18n;\nI18n.contextTypes = {\n  i18n: PropTypes.object\n};\nI18n.childContextTypes = {\n  t: PropTypes.func.isRequired,\n  i18n: PropTypes.object\n};","map":null,"metadata":{},"sourceType":"module"}